//                   LARCimprovements
/******************************************************************
 *                                                                *
 * Copyright (C) 2014-2024, Institute for Defense Analyses        *
 * 4850 Mark Center Drive, Alexandria, VA; 703-845-2500           *
 * This material may be reproduced by or for the US Government    *
 * pursuant to the copyright license under the clauses at DFARS   *
 * 252.227-7013 and 252.227-7014.                                 *
 *                                                                *
 * LARC : Linear Algebra via Recursive Compression                *
 * Authors:                                                       *
 *   - Steve Cuccaro (IDA-CCS)                                    *
 *   - John Daly (LPS)                                            *
 *   - John Gilbert (UCSB, IDA adjunct)                           *
 *   - Mark Pleszkoch (IDA-CCS)                                   *
 *   - Jenny Zito (IDA-CCS)                                       *
 *                                                                *
 * Additional contributors are listed in "LARCcontributors".      *
 *                                                                *
 * Questions: larc@super.org                                      *
 *                                                                *
 * All rights reserved.                                           *
 *                                                                *
 * Redistribution and use in source and binary forms, with or     *
 * without modification, are permitted provided that the          *
 * following conditions are met:                                  *
 *   - Redistribution of source code must retain the above        *
 *     copyright notice, this list of conditions and the          *
 *     following disclaimer.                                      *
 *   - Redistribution in binary form must reproduce the above     *
 *     copyright notice, this list of conditions and the          *
 *     following disclaimer in the documentation and/or other     *
 *     materials provided with the distribution.                  *
 *   - Neither the name of the copyright holder nor the names of  *
 *     its contributors may be used to endorse or promote         *
 *     products derived from this software without specific prior *
 *     written permission.                                        *
 *                                                                *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND         *
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,    *
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF       *
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE       *
 * DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER NOR        *
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   *
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT   *
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;   *
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)       *
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      *
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR   *
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, *
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             *
 *                                                                *
 *****************************************************************/

This file describes the major changes in LARC from June 2021 to August 2022.
===============================================================================

Summary of new features in the latest release:

* a revised explanatory paper for LARC (and also the MyPyLARC package) is
  provided with the MyPyLARC distribution, and is located at
  MyPyLARC/doc/LARCandMyPyLARC_ver2.1_2021.pdf. The MyPyLARC distribution
  is at GitHub/LARCmath/MyPyLARC.
* new I/O LARCmatrix writer routine automatically calculates the LARCsize of
  the matrix to be written and includes this in its metadata.
* when a validity check fails, the routine now notifies the user of the name
  of the routine that called the check that failed.
* user-callable routines now use PackedID, which is the MatrixID with an
  additional bit set to indicate whether the matrix is a scalar [1x1] or
  nonscalar matrix.
* separate hashtables for scalar and nonscalar matrices to reduce memory 
  requirements and simplify various functions.

Details by date ...

August 2022:
Added checks to prevent accidental reuse of global scratch variables while
the values they contain are still needed.
Updated the README.md document to reflect changes since version 2.0.

July 2022:
Merged some code used with type CLIFFORD into scalars.c.

June 2022:
Changes to code allow compilation by GCC versions 10 and 11.
Fix to make MAR cleaning more effective.
Reorganized code to separate out routines only called in SPR mode.

May 2022:
Fixed statistics on number of matrices in store so that they were correct
after cleaning.

March 2022:
Locked matrices no longer increment/decrement appears_as_sub_count, fixing
an overflow problem in larger calculations.

December 2021:
Implemented MatrixStore cleaning in MAR mode.
Added Doxygen documentation for several routines

November 2021:
Finished separating the scalar and nonscalar hash tables in the MatrixStore.
Renamed most functions so that the names better reflect what they do.

August 2021:
Changed more functions to use PackedIDs.

July 2021:
Began process of separating the hash tables for scalars and nonscalars in the
MatrixStore, and removing the need for users to call routines with pointer
arguments.
Improved validity checks by having them print information on which routine
passed the invalid data.
